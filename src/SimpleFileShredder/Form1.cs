using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
/*
 * Written by Bleddyn Baker bleddynbaker@hotmail.co.uk
 * 
 * This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

namespace SimpleFileShredder
{
    public partial class frmShredder : Form
    {
        Random random;

        public frmShredder()
        {
            InitializeComponent();
            random = new Random();
        }


        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            cmbOverwite.SelectedIndex = 1;
            cmbOverwiteFolder.SelectedIndex = 1;
        }

        private void btnOverwrite_Click(object sender, EventArgs e)
        {
            if (overwriteFile(txtPath.Text, cmbOverwite.SelectedIndex))
                MessageBox.Show(txtPath.Text + " overwritten successfully.");
        }

        private void btnShredFile_Click(object sender, EventArgs e)
        {
            if (overwriteFile(txtPath.Text, cmbOverwite.SelectedIndex))
            {
                File.Delete(txtPath.Text);
                MessageBox.Show(txtPath.Text + " overwritten and deleted successfully.");
            }
            
        }


        /// <summary>
        /// Overwrite a file
        /// </summary>
        /// <param name="filePath">The target file</param>
        /// <param name="overwriteType">The type of data to overwrite the file with, 0 is empty bytes, 1 is PRNG bytes</param>
        /// <returns>True if the files is overwitten</returns>
        bool overwriteFile(string filePath, int overwriteType)
        {
            
            if(File.Exists(txtPath.Text))
            {
                Cursor.Current = Cursors.WaitCursor;
                this.Text = "Currentley overwritting " + txtPath.Text;
                FileInfo fileInfo = new FileInfo(filePath);
                Byte[] byteArr;
                //Create a byte array the same size as the target file
                byteArr = new Byte[fileInfo.Length];
                if (overwriteType == 0)
                    Array.Clear(byteArr, 0, byteArr.Length); //Fill the array with empty bytes
                else
                    random.NextBytes(byteArr); //Fill array with pseudo randomly generated bytes

                File.WriteAllBytes(filePath, byteArr);
                Cursor.Current = Cursors.Default;
                return true;
            }
            return false;
        }

        private void btnBrowseFolder_Click(object sender, EventArgs e)
        {
            if (ofdFolder.ShowDialog() == DialogResult.OK)
            {
                txtPathFolder.Text = ofdFolder.SelectedPath;
                btnOverwriteFolder.Enabled = true;
                btnShredFolder.Enabled = true;
            }
        }

        private void btnOverwriteFolder_Click(object sender, EventArgs e)
        {
            overwriteFolder(false);
        }

        private void btnShredFolder_Click(object sender, EventArgs e)
        {
            overwriteFolder(true);
        }

        void overwriteFolder(bool delete)
        {
            if (Directory.Exists(txtPathFolder.Text))
            {
                //Enuemrate all the file in the target folder
                string[] filePaths = Directory.GetFiles(txtPathFolder.Text);

                //Overwrite each file
                foreach (string path in filePaths)
                {
                    overwriteFile(path, cmbOverwiteFolder.SelectedIndex);
                    if(delete)
                        File.Delete(path);
                }
                if (delete)
                    Directory.Delete(txtPathFolder.Text);

                //Generate the messsage displayed
                string msg = string.Empty;
                for (int i = 0; i < filePaths.Length; i++)
                {
                    if (i != filePaths.Length - 1)
                        msg += filePaths[i] + ",\n";
                    else
                    {
                        if (delete)
                        {
                            msg += string.Format("{0}\nzn{1}\noverwitten and deleted successfully", filePaths[i], txtPathFolder.Text);
                        }
                        else
                            msg += filePaths[i] + "\noverwitten successfully";
                    }

                }
                MessageBox.Show(msg);
            }
            else
                MessageBox.Show(
                    "Selected folder does not exsist.",
                    "Folder not found error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
        }

        

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            if (ofdBrowse.ShowDialog() == DialogResult.OK)
            {
                txtPath.Text = ofdBrowse.FileName;
                btnOverwrite.Enabled = true;
                btnShredFile.Enabled = true;
            }
        }


        
    }
}
